'use strict';

import * as http from 'http';
import { IResourceFactory } from './IResourceFactory';
import { IServer } from '../IServer';

const resources = [
    'Context',
    'ExportConfig',
    'MessageDebug',
    'MessageHistory',
    'MessageIngress',
    'MessageStream',
    'Metadata',
    'RequestHistory',
    'TelemetryConfig',
    'AgentEmbedded',
    'HudEmbedded',
    'ClientEmbedded'
];

export class ResourceRuntime {
    public constructor(private server: IServer) {
    }

    public register() {
        for (let i = 0; i < resources.length; i++) {
            const resourceModule = require('./' + resources[i] + 'Resource');
            const resourceFactory: IResourceFactory = resourceModule.Resource;
            const resource = new resourceFactory(this.server);

            this.server.providers.resourceManager.register(resource);
        }
    }

    public processRequest(req: http.ServerRequest, res: http.ServerResponse, next?: Function) {
        let result = this.server.providers.resourceManager.match(req);
        if (result) {
            // TODO: need to authorize the request using req and result.type (see #81)
            //if (true) {
            result.resource.invoke(req, res, next, result.parameters);
            //}
            //else {
            //    // TODO: Review, do we want a 401, 404 or continue users pipeline (see #81)
            //    res.sendStatus(401);
            //}
        }
    }
}
