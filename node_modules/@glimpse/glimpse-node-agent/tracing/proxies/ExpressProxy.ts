'use strict';

import { ExpressProxyActionRouteView } from './ExpressProxyActionRouteView';
import { ExpressProxyMiddleware } from './ExpressProxyMiddleware';
import { ProxyBase } from './ProxyBase';

export class ExpressProxy extends ProxyBase {

    /*
      Grammar for event name:
        <event> :== <method-invocation-event> | <notify-event>

        <method-invocation-event> :== "invoke"<seperator><method-phase><seperator><JSNamePath>
        <notify-event> :== "notify"<seperator><module-name><seperator><event-name>

        <method-phase> :== "pre" | "post"
        <module-name> :== <JSNamepath>
        <event-name> :== **todo**
        <seperator> :== "|"
        <JSNamePath> :== See http://usejsdoc.org/about-namepaths.html for details
    */

    // EVENT_INVOKE_PRE_EXPRESS_ROUTE_METHOD gets raised for multiple methods that are defined in a list, so it doesn't precisely follow naming convention
    public static EVENT_INVOKE_PRE_EXPRESS_ROUTE_METHOD = 'invoke|pre|module:/express.Route#**multi-method**';
    public static EVENT_INVOKE_PRE_EXPRESS_ROUTER_USE = 'invoke|pre|module:/express.Router#use';
    public static EVENT_INVOKE_PRE_EXPRESS_ROUTER = 'invoke|post|module:/express.Router';
    public static EVENT_INVOKE_PRE_EXPRESS_STATIC = 'invoke|post|module:/express.static';

    public static EVENT_INVOKE_PRE_EXPRESS_ROUTE_DISPATCH = 'invoke|pre|module:/express.Route#dispatch';
    public static EVENT_INVOKE_PRE_EXPRESS_VIEW_RENDER = 'invoke|pre|module:/express.View#render';
    public static EVENT_INVOKE_PRE_EXPRESS_RESPONSE_RENDER = 'invoke|pre|module:/express.response.render';
    public static EVENT_INVOKE_PRE_EXPRESS_RESPONSE_SEND = 'invoke|pre|module:/express.response.send';
    public static EVENT_INVOKE_PRE_EXPRESS_RESPONSE_END = 'invoke|pre|module:/express.response.end';
    public static EVENT_NOTIFY_EXPRESS_RENDER_COMPLETE = 'notify|module:/express|render-complete';

    public getModuleNames() { return ['express']; };

    public init(express, resolvedModulePath) {
        ExpressProxyActionRouteView.init(express);

        ExpressProxyMiddleware.init(express);
    }

    public get forceLoadModule(): boolean {
        return false;
    }
}
