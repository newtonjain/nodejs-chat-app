'use strict';

// load context manager first so we can avoid modules getting loaded before we have a chance to overwrite calls for async context tracking
import { ContextManagerProvider } from './messaging/ContextManagerProvider';
const cm = ContextManagerProvider.getContextManager();

import { IAgent, IAgentOptions, IAgentProviders } from './IAgent';
import { IAgentBroker } from './messaging/IAgentBroker';
import { AgentBroker } from './messaging/AgentBroker';
import { MessagePublisher } from './messaging/MessagePublisher';
import { ResourceProvider } from './configuration/ResourceProvider';
import { ModuleManager } from './inspectors/ModuleManager';
import { ErrorReporting } from './errors/ErrorReporting';
import * as Errors from './errors/Errors';

// "old" inspector-proxies
import { HttpProxy } from './inspectors/HttpProxy';
import { KnexProxy } from './inspectors/KnexProxy';
import { ConsoleProxy } from './inspectors/ConsoleProxy';
import { MorganProxy } from './inspectors/MorganProxy';
import { BodyParserProxy } from './inspectors/BodyParserProxy';
import { CookieParserProxy } from './inspectors/CookieParserProxy';
import { EnvironmentInspector } from './inspectors/EnvironmentInspector';
import { WebInspector } from './inspectors/WebInspector';
import { ClientRequestInspector } from './inspectors/ClientRequestInspector';

// new "proxies"
import { ExpressProxy } from './tracing/proxies/ExpressProxy';
import { MongoDBProxy } from './tracing/proxies/MongoDBProxy';
import { MongoDBCoreProxy } from './tracing/proxies/MongoDBCoreProxy';
import { HttpClientProxy } from './tracing/proxies/HttpClientProxy';
import { RequestIdInjector } from './tracing/proxies/RequestIdInjector';

// "new" inspectors
import { ExpressInspectorActionRouteView } from './inspectors/ExpressInspectorActionRouteView';
import { ExpressInspectorMiddleware } from './inspectors/ExpressInspectorMiddleware';
import { MongoDBInspector } from './inspectors/MongoDBInspector';
import { MongoDBCoreInspector } from './inspectors/MongoDBCoreInspector';

import { DateTime } from './configuration/DateTime';
import { ScriptManager } from './messaging/ScriptManager';
import { ConfigSettings } from './configuration/ConfigSettings';
import { RequireAnalyzer } from './configuration/RequireAnalyzer';

import path = require('path');

export class Agent implements IAgent {

    private _broker: IAgentBroker;
    private _contextManager = cm;
    private _errorReportingService = ErrorReporting.getService();
    private _providers: IAgentProviders;
    private _resourceProvider: ResourceProvider = new ResourceProvider();
    private _messagePublisher: MessagePublisher = new MessagePublisher(this._resourceProvider);

   public constructor() {
        const commandLineArgs = ConfigSettings.filterCommandLineArgs('--GLIMPSE_');
        const localSettingsFile = ConfigSettings.findFile(__dirname, 'glimpse.config.json');
        const defaultSettings = path.join(__dirname, 'glimpse.agent.default.config.json');
        const configSettings = new ConfigSettings(commandLineArgs, 'GLIMPSE_', localSettingsFile, defaultSettings);

        this._providers = {
            contextManager: this._contextManager,
            dateTime: new DateTime(),
            errorReportingService: this._errorReportingService,
            messagePublisher: this._messagePublisher,
            resourceProvider: this._resourceProvider,
            scriptManager: new ScriptManager(this._contextManager, this._resourceProvider),
            configSettings: configSettings
        };
        this._broker = new AgentBroker(this);
    }

    public get broker(): IAgentBroker {
        return this._broker;
    }

    public get providers(): IAgentProviders {
        return this._providers;
    }

    public init(options?: IAgentOptions) {
        this.validateReferencedPackages();

        new ExpressInspectorActionRouteView().init(this._broker, this._contextManager, this._providers.dateTime, this._providers.errorReportingService, this._providers.scriptManager);
        new ExpressInspectorMiddleware().init(this._broker, this._contextManager, this._providers.dateTime);
        new MongoDBInspector().init(this);
        new MongoDBCoreInspector().init(this);
        new ClientRequestInspector().init(this);

        // setup interceptor
        const moduleManager = new ModuleManager();
        moduleManager.init(this, require('module'));

        // always load console proxy first since we need to trap console methods before console module gets loaded
        moduleManager.addProxy(new ConsoleProxy());

        moduleManager.addTracingProxy(new RequestIdInjector());

        const httpProxy = new HttpProxy();
        httpProxy.addServerInspector(new WebInspector());
        httpProxy.addServerInspector(new EnvironmentInspector());

        moduleManager.addProxy(httpProxy, 'http');
        moduleManager.addProxy(httpProxy, 'https');
        moduleManager.addTracingProxy(new ExpressProxy());
        moduleManager.addTracingProxy(new HttpClientProxy());
        moduleManager.addProxy(new KnexProxy());
        moduleManager.addTracingProxy(new MongoDBCoreProxy());
        moduleManager.addTracingProxy(new MongoDBProxy());
        moduleManager.addProxy(new MorganProxy());
        moduleManager.addProxy(new BodyParserProxy());
        moduleManager.addProxy(new CookieParserProxy());

        this._resourceProvider.init(this._contextManager, options);
        this._providers.scriptManager.init();
        this._messagePublisher.init(options);
    }

    private validateReferencedPackages() {
        if (this.providers.configSettings.getBoolean('agent.validate-packages.enabled', true)) {
            const excludedPackages = this.providers.configSettings.get('agent.validate-packages.excludedPackages', []);
            const packageNames = RequireAnalyzer.getReferencedPackageNames(require.cache, excludedPackages);

            if (packageNames.length > 0) {
                packageNames.forEach(packageName => {
                    this.providers.errorReportingService.reportError(Errors.packageRequiredBeforeInit(packageName));
                });
            }
        }
    }
}
