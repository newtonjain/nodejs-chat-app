'use strict';

import { IAgent } from '../IAgent';
import { IInspector } from './IInspector';
import { IProxyEvent } from '../tracing/IProxyEvent';
import { DateTimeValue } from '../configuration/DateTimeValue';
import tracing from '../tracing/Tracing';
import * as HttpClientProxy from '../tracing/proxies/HttpClientProxy';
import { HttpHelper } from './util/HttpHelper';

import url = require('url');
import * as _ from 'lodash';

// TODO: move this to a global config object
const MAX_BODY_SIZE = 132000;

export class ClientRequestInspector implements IInspector {
    private agent: IAgent;
    private requests = {};

    private normalizeOptions(options, req) {
        // Normalize to a copy of the original options
        if (typeof options === 'string') {
            options = url.parse(options);
        }
        options = _.assign({}, options);

        // Oddly, url.format ignores path and only uses pathname and search,
        // so create them from the path, if path was specified
        if (options.path) {
            const parsedQuery = url.parse(options.path);
            options.pathname = parsedQuery.pathname;
            options.search = parsedQuery.search;
        }

        // Simiarly, url.format ignores hostname and path if host is specified,
        // even if host doesn't have the port, but http.request does not work
        // this way. It will use the port if one is not specified in host,
        // effectively treating host as hostname, but will use the port specified
        // in host if it exists. Fun times.
        if (options.host && options.port) {
            // Force a protocol so it will parse the host as the host, not path.
            // It is discarded and not used, so it doesn't matter if it doesn't match
            const parsedHost = url.parse(`http://${options.host}`);
            if (!parsedHost.port && options.port) {
                options.hostname = options.host;
                delete options.host;
            }
        }

        // Mix in default values used by http.request and others
        options.protocol = options.protocol || req.agent.protocol;
        options.hostname = options.hostname || 'localhost';

        return options;
    }

    public numOutstandingRequests() {
        return Object.keys(this.requests).length;
    }

    public before(options, req, content, size: number, startTimeStamp: string) {

        // TODO: https://github.com/Glimpse/Glimpse.Node.Prototype/issues/307
        // Add support for base64 encoding non-text content by setting the encoding here
        const encoding = 'utf8';
        for (let i = 0; i < content.length; i++) {
            if (Buffer.isBuffer(content[i])) {
                content[i] = content[i].toString();
            }
        }

        const payload = {
            protocol: {
                identifier: options.protocol.replace(':', '').toUpperCase(),
                // This value is hard coded in Node: https://github.com/nodejs/node/blob/d0582ef9e19e8ed941b0a585c935ad11919080ee/lib/_http_client.js#L114
                version: '1.1'
            },
            url: url.format(options),
            method: req.method,
            startTime: startTimeStamp,
            // Note: this uses a private field on the request object. Sadly, there isn't another way to get these currently.
            headers: req._headers,
            isAjax: false,
            clientIp: '127.0.0.1', // TODO: Is this field relevant, since it's the IP of this system? We can get the list of interfaces from os.networkInterfaces()
            body: {
                size,
                encoding,
                content: content.join(''),
                isTruncated: size > content.length
            }
        };

        this.agent.broker.sendMessage(payload, ['data-http-request'], undefined, HttpHelper.getContext(req));
    }

    public after(options, res, content, size: number, endTimeStamp: string, duration: number) {

        // TODO: https://github.com/Glimpse/Glimpse.Node.Prototype/issues/307
        // Add support for base64 encoding non-text content by setting the encoding here
        const encoding = 'utf8';
        for (let i = 0; i < content.length; i++) {
            if (Buffer.isBuffer(content[i])) {
                content[i] = content[i].toString();
            }
        }

        const payload = {
            // res.url doesn't seem to be populated in practice
            url: res.url || url.format(options),
            headers: res.headers,
            statusCode: res.statusCode,
            endTime: endTimeStamp,
            duration,
            body: {
                size,
                encoding,
                content: content.join(''),
                isTruncated: size > content.length
            }
        };

        this.agent.broker.sendMessage(payload, ['data-http-response'], undefined, HttpHelper.getContext(res));
    }

    public init(agent: IAgent) {
        this.agent = agent;
        tracing.onAlways(HttpClientProxy.EVENT_REQUEST_CREATED, (event) => this.onRequestCreated(event));
        tracing.onAlways(HttpClientProxy.EVENT_REQUEST_DATA_SENT, (event) => this.onRequestDataSent(event));
        tracing.onAlways(HttpClientProxy.EVENT_REQUEST_END, (event) => this.onRequestEnd(event));
        tracing.onAlways(HttpClientProxy.EVENT_REQUEST_ERROR, (event) => this.onRequestError(event));
        tracing.onAlways(HttpClientProxy.EVENT_RESPONSE_DATA_RECEIVED, (event) => this.onResponseDataReceived(event));
        tracing.onAlways(HttpClientProxy.EVENT_RESPONSE_END, (event) => this.onResponseEnd(event));
        tracing.onAlways(HttpClientProxy.EVENT_RESPONSE_ERROR, (event) => this.onResponseError(event));
    }

    private onRequestCreated(event: IProxyEvent): void {
        const eventData: HttpClientProxy.IRequestCreatedEvent = event.data;
        this.requests[eventData.id] = {
            startTime: event.time,
            startTimeStamp: DateTimeValue.fromUnixMillisecondTimestamp(event.timestamp, event.time).format(),
            options: this.normalizeOptions(eventData.options, eventData.req),
            requestBodyChunks: [],
            requestBodyLength: 0,
            responseBodyChunks: [],
            responseBodyLength: 0
        };
    }

    private onRequestDataSent(event: IProxyEvent): void {
        const eventData: HttpClientProxy.IRequestDataSentEvent = event.data;
        const masterData = this.requests[eventData.id];
        if (!masterData) {
            throw new Error('Internal error: could not find associated master data');
        }
        // Save part or all of the chunk to the set of chunks,
        // truncating if necessary to keep the set under the
        // max body size
        const originalChunkLength = eventData.chunk.length;
        let normalizedChunk = eventData.chunk;
        if (masterData.requestBodyLength < MAX_BODY_SIZE) {
            if (masterData.requestBodyLength + originalChunkLength >= MAX_BODY_SIZE) {
                normalizedChunk = normalizedChunk.slice(0, MAX_BODY_SIZE - masterData.requestBodyLength);
            }
            masterData.requestBodyChunks.push(normalizedChunk);
        }
        masterData.requestBodyLength += originalChunkLength;
    }

    private onRequestEnd(event: IProxyEvent): void {
        const eventData: HttpClientProxy.IRequestEndEvent = event.data;
        const masterData = this.requests[eventData.id];
        if (!masterData) {
            throw new Error('Internal error: could not find associated master data');
        }
        this.before(
            masterData.options,
            eventData.req,
            masterData.requestBodyChunks,
            masterData.requestBodyLength,
            masterData.startTimeStamp
        );
    }

    private onRequestError(event: IProxyEvent): void {
        const eventData: HttpClientProxy.IRequestErrorEvent = event.data;
        const masterData = this.requests[eventData.id];
        if (!masterData) {
            throw new Error('Internal error: could not find associated master data');
        }
        delete this.requests[eventData.id];
    }

    private onResponseDataReceived(event: IProxyEvent): void {
        const eventData: HttpClientProxy.IResponseDataReceivedEvent = event.data;
        const masterData = this.requests[eventData.id];
        if (!masterData) {
            throw new Error('Internal error: could not find associated master data');
        }
        // Save part or all of the chunk to the set of chunks,
        // truncating if necessary to keep the set under the
        // max body size
        const originalChunkLength = eventData.chunk.length;
        let normalizedChunk = eventData.chunk;
        if (masterData.responseBodyLength < MAX_BODY_SIZE) {
            if (masterData.responseBodyLength + originalChunkLength >= MAX_BODY_SIZE) {
                normalizedChunk = normalizedChunk.slice(0, MAX_BODY_SIZE - masterData.responseBodyLength);
            }
            masterData.responseBodyChunks.push(normalizedChunk);
        }
        masterData.responseBodyLength += originalChunkLength;
    }

    private onResponseEnd(event: IProxyEvent): void {
        const eventData: HttpClientProxy.IResponseEndEvent = event.data;
        const masterData = this.requests[eventData.id];
        if (!masterData) {
            throw new Error('Internal error: could not find associated master data');
        }
        const duration = (event.time[0] * 1e9 + event.time[1] -
            masterData.startTime[0] * 1e9 - masterData.startTime[1]) / 1e6;
        this.after(
            masterData.options,
            eventData.res,
            masterData.responseBodyChunks,
            masterData.responseBodyLength,
            DateTimeValue.fromUnixMillisecondTimestamp(event.timestamp, event.time).format(),
            duration
        );
        delete this.requests[eventData.id];
    }

    private onResponseError(event: IProxyEvent): void {
        const eventData: HttpClientProxy.IResponseErrorEvent = event.data;
        const masterData = this.requests[eventData.id];
        if (!masterData) {
            throw new Error('Internal error: could not find associated master data');
        }
        delete this.requests[eventData.id];
    }
}
