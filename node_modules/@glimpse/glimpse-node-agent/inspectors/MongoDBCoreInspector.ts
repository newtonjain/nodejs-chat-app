'use strict';

import { IAgent } from '../IAgent';
import { IContextManager } from '../messaging/IContextManager';
import { MongoDBCoreProxy } from '../tracing/proxies/MongoDBCoreProxy';
import Tracing from '../tracing/Tracing';

export class MongoDBCoreInspector {
    private contextManager: IContextManager;

    public init(agent: IAgent) {
        this.contextManager = agent.providers.contextManager;
        const self = this;

        Tracing.onAlways(MongoDBCoreProxy.EVENT_INVOKE_PRE_MONGODB_CORE_SERVER_COMMAND, (event) => {
            let originalArgs = event.data.originalArgs;
            let callbackIndex = 3;
            let callback = originalArgs[callbackIndex];

            // original signiture: command(ns, cmd, options, callback)
            if (self.contextManager.isWithinContext()) {
                if (typeof originalArgs[2] === 'function') {
                    callback = originalArgs[2];
                    callbackIndex = 2;
                }

                // we need to propogate context for any callbacks so the glimpse context ID doesn't get lost
                callback = self.contextManager.wrapInCurrentContext(callback);
                event.data.originalArgs[callbackIndex] = callback;
            }
        });

        Tracing.onAlways(MongoDBCoreProxy.EVENT_INVOKE_PRE_MONGODB_CORE_CURSOR_NEXT, (event) => {
            let originalArgs = event.data.originalArgs;
            let callback = originalArgs[0];

            if (self.contextManager.isWithinContext() && typeof callback === 'function') {
                // we need to propogate context for any callbacks so the glimpse context ID doesn't get lost
                callback = self.contextManager.wrapInCurrentContext(callback);
                event.data.originalArgs[0] = callback;
            }
        });
    }
}
