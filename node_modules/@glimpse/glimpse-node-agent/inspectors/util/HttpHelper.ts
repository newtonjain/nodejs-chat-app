'use strict';

/* tslint:disable:no-any */

import _ = require('lodash');
import parse = require('parseurl');
import cookie = require('cookie');
import http = require('http');
import { IContext } from '../../messaging/IContextManager';

export class RequestHelper {
    public static header(req, name) {
        const lc = name.toLowerCase();

        switch (lc) {
            case 'referer':
            case 'referrer':
                return req.headers.referrer || req.headers.referer;
            default:
                return req.headers[lc];
        }
    }

    /*
    // TODO: not worring about trust/proxies, etc. at the moment
    protocol: function(req) {
        ...
        var trust = this.app.get('trust proxy fn');
        if (!trust(req.connection.remoteAddress, 0)) {
            return proto;
        }
        ....
    },
    */
    public static protocol(req) {
        let proto = req.connection.encrypted ? 'https' : 'http';
        proto = this.header(req, 'X-Forwarded-Proto') || proto;

        return proto.split(/\s*,\s*/)[0];
    }

    public static parseurl(req) {
        return parse(req);
    }

    /*
    // TODO: not worring about trust/procies etc atm
    hostname: function(req) {
        ...
        var trust = this.app.get('trust proxy fn');
        var host = request.header(req, 'X-Forwarded-Host');
        if (!host || !trust(req.connection.remoteAddress, 0)) {
            host = request.header(req, 'Host');
        }
        ...
    }
    */
    public static host(req) {
        return this.header(req, 'X-Forwarded-Host') || this.header(req, 'Host');
    }

    public static hostname(req) {
        const host = RequestHelper.host(req);
        if (!host) {
            return;
        }

        // IPv6 literal support
        const offset = host[0] === '[' ? host.indexOf(']') + 1 : 0;
        const index = host.indexOf(':', offset);

        return index !== -1 ? host.substring(0, index) : host;
    }

    public static parseCookies(req) {
        const result = this.header(req, 'cookie');

        return result ? cookie.parse(result) : undefined;
    }
}

export class ResponseHelper {
    public static appendHeader(res, field, val) {
        const prev = res.getHeader(field);
        let value = val;

        if (prev) {
            // concat the new and prev vals
            value = Array.isArray(prev) ? prev.concat(val)
                : Array.isArray(val) ? [prev].concat(val)
                    : [prev, val];
        }

        return res.setHeader(field, value);
    }

    public static setCookie(res, name, value, options?) {
        const opts: any = _.defaults({}, options, { path: '/' });

        if ('maxAge' in opts) {
            opts.expires = new Date(Date.now() + opts.maxAge);
            // TODO: What is this doing?
            opts.maxAge /= 1000;
        }

        this.appendHeader(res, 'Set-Cookie', cookie.serialize(name, String(value), opts));

        return this;
    }

    public static clearCookie(res, name, options) {
        const opts = _.defaults({}, options, { expires: new Date(1), path: '/' });

        return this.setCookie(res, name, '', opts);
    }

}

export class HttpHelper {

    /**
     * helper method to store the context on an HTTP request or response instance
     */
    public static setContext(requestResponse: http.IncomingMessage | http.ServerResponse, context: IContext) {
        /*tslint:disable:no-any */
        (<any>requestResponse).__glimpseContext = context;
        /*tslint:enable:no-any */
    }

    /**
     * helper method to retrieve the context from an HTTP request or response instance
     */
    public static getContext(requestResponse: http.IncomingMessage | http.ServerResponse): IContext {
        if (requestResponse) {
            /*tslint:disable:no-any */
            return <IContext>((<any>requestResponse).__glimpseContext);
            /*tslint:enable:no-any */
        }
        return undefined;
    }
}
