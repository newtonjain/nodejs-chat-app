'use strict';

import * as _ from 'lodash';
import * as events from 'events';
import * as http from 'http';

export class ResponseListener extends events.EventEmitter {
    private static glimpseResponseListenerProperty = '__glimpseResponseListener';

    public static headersEvent = 'headers';

    constructor(res: http.ServerResponse) {
        super();

        this.patchResponseAddTrailers(res);
        this.patchResponseSetHeader(res);
    }

    public static attachListener(res: http.ServerResponse): ResponseListener {
        let responseListener = res[ResponseListener.glimpseResponseListenerProperty];

        if (!responseListener) {
            responseListener = new ResponseListener(res);

            res[ResponseListener.glimpseResponseListenerProperty] = responseListener;
        }

        return responseListener;
    }

    private patchResponseSetHeader(res: http.ServerResponse) {
        const oldSetHeader = res.setHeader;

        const self = this;

        res.setHeader = function newSetHeader(name, value: number | string | string[]) {

            oldSetHeader.apply(this, arguments);

            const newHeaders: { [key: string]: string[] } = {};

            if (Array.isArray(value)) {
                newHeaders[name.toLowerCase()] = value;
            }
            else {
                newHeaders[name.toLowerCase()] = [ value.toString() ];
            }

            self.publishHeaderChanges(newHeaders);
        };
    }

    private patchResponseAddTrailers(res: http.ServerResponse) {
        const oldAddTrailers = res.addTrailers;

        const self = this;

        res.addTrailers = function newAddTrailers(headers: { [key: string]: string }) {

            oldAddTrailers.apply(this, arguments);

            const newHeaders: { [key: string]: string[] } = {};

            _.forOwn(headers, (value, key) => {
                newHeaders[key.toLowerCase()] = [ value ];
            });

            self.publishHeaderChanges(newHeaders);
        };
    }

    private publishHeaderChanges(headers: { [key: string]: string[] }) {
        this.emit(ResponseListener.headersEvent, headers);
    }
}
