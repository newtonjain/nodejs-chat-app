'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ContextManagerBase_1 = require('./ContextManagerBase');
var async_track_1 = require('./../async-track/async-track');
/*tslint:disable:no-any */
//const rawDebug = (<any>process)._rawDebug;
/*tslint:enable:no-any */
var ContextManagerAsyncTrack = (function (_super) {
    __extends(ContextManagerAsyncTrack, _super);
    function ContextManagerAsyncTrack() {
        _super.apply(this, arguments);
    }
    ContextManagerAsyncTrack.prototype.init = function (asyncTrack) {
        var self = this;
        _super.prototype.init.call(this);
        if (!asyncTrack) {
            asyncTrack = async_track_1.getAsyncTrack();
        }
        this.asyncTrack = asyncTrack;
        var handler = {
            onAsyncTransition: function onAsyncTransition(parentId, id) {
                //rawDebug(`onAsyncTransition: parentId ${parentId}, id ${id}`);
                var context = self.currentContext();
                if (context) {
                    return self.createAsyncState(context);
                }
                else {
                    return undefined;
                }
            },
            onBeforeInvocation: function onBeforeInvocation(id) {
                //rawDebug(`onBeforeInvocation:  id ${id}`);
            },
            onAfterInvocation: function onAfterInvocation(id) {
                //rawDebug(`onAfterInvocation:  id ${id}`);
            }
        };
        this.asyncTrack.addHandler(handler);
    };
    ;
    ContextManagerAsyncTrack.prototype.createAsyncState = function (context) {
        return {
            GLIMPSE_NAMESPACE: {
                GLIMPSE_CONTEXT: context
            }
        };
    };
    /* tslint:disable:no-any */
    ContextManagerAsyncTrack.prototype.runInNewContext = function (req, callback) {
        var context = this.createContext(req);
        var callbackWrapper = function callbackWrapper() {
            return callback(context);
        };
        return this.asyncTrack.runInContext(callbackWrapper, this.createAsyncState(context));
    };
    /* tslint:enable:no-any */
    ContextManagerAsyncTrack.prototype.wrapInCurrentContext = function (callback) {
        var self = this;
        var asyncContext = this.asyncTrack.getCurrentContext();
        var wrapper = function wrapper() {
            var outerArgs = arguments;
            var outerThis = this;
            var callbackWrapper = function callbackWrapper() {
                callback.apply(outerThis, outerArgs);
            };
            return self.asyncTrack.runInContext(callbackWrapper, asyncContext);
        };
        return wrapper;
    };
    ContextManagerAsyncTrack.prototype.currentContext = function () {
        var asyncContext = this.asyncTrack.getCurrentContext();
        var glimpseContext = undefined;
        if (asyncContext) {
            var glimpseNS = asyncContext[ContextManagerAsyncTrack.GLIMPSE_NAMESPACE];
            if (glimpseNS) {
                glimpseContext = glimpseNS[ContextManagerAsyncTrack.GLIMPSE_CONTEXT];
            }
        }
        return glimpseContext;
    };
    ContextManagerAsyncTrack.GLIMPSE_NAMESPACE = 'GLIMPSE_NAMESPACE';
    ContextManagerAsyncTrack.GLIMPSE_CONTEXT = 'GLIMPSE_CONTEXT';
    return ContextManagerAsyncTrack;
}(ContextManagerBase_1.ContextManagerBase));
exports.ContextManagerAsyncTrack = ContextManagerAsyncTrack;

//# sourceMappingURL=../../maps/messaging/ContextManagerAsyncTrack.js.map
