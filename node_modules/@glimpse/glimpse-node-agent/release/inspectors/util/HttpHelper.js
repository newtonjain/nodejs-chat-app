'use strict';
/* tslint:disable:no-any */
var _ = require('lodash');
var parse = require('parseurl');
var cookie = require('cookie');
var RequestHelper = (function () {
    function RequestHelper() {
    }
    RequestHelper.header = function (req, name) {
        var lc = name.toLowerCase();
        switch (lc) {
            case 'referer':
            case 'referrer':
                return req.headers.referrer || req.headers.referer;
            default:
                return req.headers[lc];
        }
    };
    /*
    // TODO: not worring about trust/proxies, etc. at the moment
    protocol: function(req) {
        ...
        var trust = this.app.get('trust proxy fn');
        if (!trust(req.connection.remoteAddress, 0)) {
            return proto;
        }
        ....
    },
    */
    RequestHelper.protocol = function (req) {
        var proto = req.connection.encrypted ? 'https' : 'http';
        proto = this.header(req, 'X-Forwarded-Proto') || proto;
        return proto.split(/\s*,\s*/)[0];
    };
    RequestHelper.parseurl = function (req) {
        return parse(req);
    };
    /*
    // TODO: not worring about trust/procies etc atm
    hostname: function(req) {
        ...
        var trust = this.app.get('trust proxy fn');
        var host = request.header(req, 'X-Forwarded-Host');
        if (!host || !trust(req.connection.remoteAddress, 0)) {
            host = request.header(req, 'Host');
        }
        ...
    }
    */
    RequestHelper.host = function (req) {
        return this.header(req, 'X-Forwarded-Host') || this.header(req, 'Host');
    };
    RequestHelper.hostname = function (req) {
        var host = RequestHelper.host(req);
        if (!host) {
            return;
        }
        // IPv6 literal support
        var offset = host[0] === '[' ? host.indexOf(']') + 1 : 0;
        var index = host.indexOf(':', offset);
        return index !== -1 ? host.substring(0, index) : host;
    };
    RequestHelper.parseCookies = function (req) {
        var result = this.header(req, 'cookie');
        return result ? cookie.parse(result) : undefined;
    };
    return RequestHelper;
}());
exports.RequestHelper = RequestHelper;
var ResponseHelper = (function () {
    function ResponseHelper() {
    }
    ResponseHelper.appendHeader = function (res, field, val) {
        var prev = res.getHeader(field);
        var value = val;
        if (prev) {
            // concat the new and prev vals
            value = Array.isArray(prev) ? prev.concat(val)
                : Array.isArray(val) ? [prev].concat(val)
                    : [prev, val];
        }
        return res.setHeader(field, value);
    };
    ResponseHelper.setCookie = function (res, name, value, options) {
        var opts = _.defaults({}, options, { path: '/' });
        if ('maxAge' in opts) {
            opts.expires = new Date(Date.now() + opts.maxAge);
            // TODO: What is this doing?
            opts.maxAge /= 1000;
        }
        this.appendHeader(res, 'Set-Cookie', cookie.serialize(name, String(value), opts));
        return this;
    };
    ResponseHelper.clearCookie = function (res, name, options) {
        var opts = _.defaults({}, options, { expires: new Date(1), path: '/' });
        return this.setCookie(res, name, '', opts);
    };
    return ResponseHelper;
}());
exports.ResponseHelper = ResponseHelper;
var HttpHelper = (function () {
    function HttpHelper() {
    }
    /**
     * helper method to store the context on an HTTP request or response instance
     */
    HttpHelper.setContext = function (requestResponse, context) {
        /*tslint:disable:no-any */
        requestResponse.__glimpseContext = context;
        /*tslint:enable:no-any */
    };
    /**
     * helper method to retrieve the context from an HTTP request or response instance
     */
    HttpHelper.getContext = function (requestResponse) {
        if (requestResponse) {
            /*tslint:disable:no-any */
            return (requestResponse.__glimpseContext);
        }
        return undefined;
    };
    return HttpHelper;
}());
exports.HttpHelper = HttpHelper;

//# sourceMappingURL=../../../maps/inspectors/util/HttpHelper.js.map
