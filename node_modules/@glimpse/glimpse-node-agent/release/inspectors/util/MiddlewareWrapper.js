'use strict';
var ResponseListener_1 = require('./ResponseListener');
var GuidHelper_1 = require('../../util/GuidHelper');
var HttpHelper_1 = require('./HttpHelper');
var _ = require('lodash');
var MiddlewareWrapper = (function () {
    function MiddlewareWrapper() {
    }
    MiddlewareWrapper.wrapCommonMiddleware = function (broker, contextManager, dateTime, paths, method, originalMiddlewareName, middlewareMetadata, req, res, next, originalMiddleware) {
        var context = HttpHelper_1.HttpHelper.getContext(res);
        if (!context) {
            return originalMiddleware(req, res, next);
        }
        contextManager.checkContextID('MiddlewareWrapper::MiddlewareWrapper', context ? context.id : undefined);
        var correlationId = GuidHelper_1.GuidHelper.newGuid();
        var startTime = dateTime.now;
        var name = originalMiddlewareName || '<anonymous>';
        var displayName = undefined;
        var packageName = undefined;
        if (middlewareMetadata) {
            name = middlewareMetadata.name || name;
            displayName = middlewareMetadata.displayName;
            packageName = middlewareMetadata.packageName;
        }
        var startPayload = {
            correlationId: correlationId,
            name: name,
            startTime: startTime.format()
        };
        if (displayName) {
            startPayload.displayName = displayName;
        }
        if (packageName) {
            startPayload.packageName = packageName;
        }
        if (paths && paths.length > 0) {
            startPayload.paths = paths;
        }
        if (method) {
            startPayload.method = method;
        }
        if (req.params && !_.isEmpty(req.params)) {
            startPayload.params = req.params;
        }
        broker.sendMessage(startPayload, ['middleware-express', 'middleware-start'], 
        /* indices */ undefined, context);
        var headers = {};
        function publishMiddlewareEnd(result) {
            var endTime = dateTime.now;
            var duration = endTime.diff(startTime);
            var endPayload = {
                correlationId: correlationId,
                name: name,
                endTime: endTime.format(),
                duration: duration,
                result: result
            };
            if (displayName) {
                endPayload.displayName = displayName;
            }
            if (packageName) {
                endPayload.packageName = packageName;
            }
            if (!_.isEmpty(headers)) {
                endPayload.headers = _.map(headers, function (value, key) {
                    return {
                        op: 'set',
                        name: key,
                        values: value
                    };
                });
            }
            if (paths && paths.length > 0) {
                endPayload.paths = paths;
            }
            if (method) {
                endPayload.method = method;
            }
            if (req.params && !_.isEmpty(req.params)) {
                endPayload.params = req.params;
            }
            broker.sendMessage(endPayload, ['middleware-express', 'middleware-end'], 
            /* indices */ undefined, context);
        }
        ;
        function onPublishMiddlewareEnd() {
            publishMiddlewareEnd(/* result */ 'end');
        }
        ;
        if (!context.middleware) {
            context.middleware = {
                stack: []
            };
        }
        context.middleware.stack.push(onPublishMiddlewareEnd);
        function onResponseFinish() {
            while (context.middleware.stack.length > 0) {
                var endFunction = context.middleware.stack.pop();
                endFunction();
            }
        }
        ;
        res.on('finish', onResponseFinish);
        function onHeaders(newHeaders) {
            _.assign(headers, newHeaders);
        }
        var responseListener = ResponseListener_1.ResponseListener.attachListener(res);
        responseListener.on(ResponseListener_1.ResponseListener.headersEvent, onHeaders);
        var publishedEnd = false;
        var newNext = contextManager.wrapInCurrentContext(function newNextInternal() {
            contextManager.checkContextID('MiddlewareWrapper::newNext', context.id);
            res.removeListener('finish', onResponseFinish);
            responseListener.removeListener(ResponseListener_1.ResponseListener.headersEvent, onHeaders);
            context.middleware.stack.pop();
            var result = 'next';
            if (arguments && arguments.length > 0 && arguments[0] !== 'route') {
                result = 'error';
            }
            publishMiddlewareEnd(/* result */ result);
            publishedEnd = true;
            return next.apply(this, arguments);
        });
        try {
            originalMiddleware(req, res, newNext);
        }
        catch (err) {
            // NOTE: If the original middleware calling next() throws an exception it will be caught here,
            //       but we've already published the middleware-end message so there's no need to do it here.
            if (!publishedEnd) {
                res.removeListener('finish', onResponseFinish);
                responseListener.removeListener(ResponseListener_1.ResponseListener.headersEvent, onHeaders);
                context.middleware.stack.pop();
                publishMiddlewareEnd(/* result */ 'error');
                publishedEnd = true;
            }
            throw err;
        }
    };
    MiddlewareWrapper.wrapErrorMiddleware = function (broker, contextManager, dateTime, paths, method, originalMiddleware) {
        var wrappedMiddleware = function wrappedMiddleware(err, req, res, next) {
            MiddlewareWrapper.wrapCommonMiddleware(broker, contextManager, dateTime, paths, method, originalMiddleware.name, originalMiddleware.glimpse, req, res, next, function (q, r, n) {
                originalMiddleware(err, q, r, n);
            });
        };
        wrappedMiddleware.glimpse = {
            originalName: originalMiddleware.name
        };
        return wrappedMiddleware;
    };
    MiddlewareWrapper.wrapMiddleware = function (broker, contextManager, dateTime, paths, method, originalMiddleware) {
        var wrappedMiddleware = function wrappedMiddleware(req, res, next) {
            MiddlewareWrapper.wrapCommonMiddleware(broker, contextManager, dateTime, paths, method, originalMiddleware.name, originalMiddleware.glimpse, req, res, next, function (q, r, n) {
                originalMiddleware(q, r, n);
            });
        };
        wrappedMiddleware.glimpse = {
            originalName: originalMiddleware.name
        };
        return wrappedMiddleware;
    };
    MiddlewareWrapper.wrap = function (broker, contextManager, dateTime, paths, method, originalMiddleware) {
        if (originalMiddleware && typeof originalMiddleware === 'function') {
            if (originalMiddleware.length === 2 || originalMiddleware.length === 3) {
                return MiddlewareWrapper.wrapMiddleware(broker, contextManager, dateTime, paths, method, originalMiddleware);
            }
            if (originalMiddleware.length === 4) {
                return MiddlewareWrapper.wrapErrorMiddleware(broker, contextManager, dateTime, paths, method, originalMiddleware);
            }
        }
        return originalMiddleware;
    };
    MiddlewareWrapper.attachMetadata = function (middleware, name, displayName, packageName) {
        if (middleware) {
            var metadata = middleware.glimpse || {};
            if (!middleware.glimpse) {
                middleware.glimpse = metadata;
            }
            if (!metadata.name) {
                metadata.name = name;
            }
            if (!metadata.displayName) {
                metadata.displayName = displayName;
            }
            if (!metadata.packageName) {
                metadata.packageName = packageName;
            }
        }
    };
    return MiddlewareWrapper;
}());
exports.MiddlewareWrapper = MiddlewareWrapper;

//# sourceMappingURL=../../../maps/inspectors/util/MiddlewareWrapper.js.map
