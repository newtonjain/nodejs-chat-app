'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var _ = require('lodash');
var events = require('events');
var ResponseListener = (function (_super) {
    __extends(ResponseListener, _super);
    function ResponseListener(res) {
        _super.call(this);
        this.patchResponseAddTrailers(res);
        this.patchResponseSetHeader(res);
    }
    ResponseListener.attachListener = function (res) {
        var responseListener = res[ResponseListener.glimpseResponseListenerProperty];
        if (!responseListener) {
            responseListener = new ResponseListener(res);
            res[ResponseListener.glimpseResponseListenerProperty] = responseListener;
        }
        return responseListener;
    };
    ResponseListener.prototype.patchResponseSetHeader = function (res) {
        var oldSetHeader = res.setHeader;
        var self = this;
        res.setHeader = function newSetHeader(name, value) {
            oldSetHeader.apply(this, arguments);
            var newHeaders = {};
            if (Array.isArray(value)) {
                newHeaders[name.toLowerCase()] = value;
            }
            else {
                newHeaders[name.toLowerCase()] = [value.toString()];
            }
            self.publishHeaderChanges(newHeaders);
        };
    };
    ResponseListener.prototype.patchResponseAddTrailers = function (res) {
        var oldAddTrailers = res.addTrailers;
        var self = this;
        res.addTrailers = function newAddTrailers(headers) {
            oldAddTrailers.apply(this, arguments);
            var newHeaders = {};
            _.forOwn(headers, function (value, key) {
                newHeaders[key.toLowerCase()] = [value];
            });
            self.publishHeaderChanges(newHeaders);
        };
    };
    ResponseListener.prototype.publishHeaderChanges = function (headers) {
        this.emit(ResponseListener.headersEvent, headers);
    };
    ResponseListener.glimpseResponseListenerProperty = '__glimpseResponseListener';
    ResponseListener.headersEvent = 'headers';
    return ResponseListener;
}(events.EventEmitter));
exports.ResponseListener = ResponseListener;

//# sourceMappingURL=../../../maps/inspectors/util/ResponseListener.js.map
