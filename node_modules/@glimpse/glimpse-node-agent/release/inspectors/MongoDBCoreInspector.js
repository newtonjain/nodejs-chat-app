'use strict';
var MongoDBCoreProxy_1 = require('../tracing/proxies/MongoDBCoreProxy');
var Tracing_1 = require('../tracing/Tracing');
var MongoDBCoreInspector = (function () {
    function MongoDBCoreInspector() {
    }
    MongoDBCoreInspector.prototype.init = function (agent) {
        this.contextManager = agent.providers.contextManager;
        var self = this;
        Tracing_1.default.onAlways(MongoDBCoreProxy_1.MongoDBCoreProxy.EVENT_INVOKE_PRE_MONGODB_CORE_SERVER_COMMAND, function (event) {
            var originalArgs = event.data.originalArgs;
            var callbackIndex = 3;
            var callback = originalArgs[callbackIndex];
            // original signiture: command(ns, cmd, options, callback)
            if (self.contextManager.isWithinContext()) {
                if (typeof originalArgs[2] === 'function') {
                    callback = originalArgs[2];
                    callbackIndex = 2;
                }
                // we need to propogate context for any callbacks so the glimpse context ID doesn't get lost
                callback = self.contextManager.wrapInCurrentContext(callback);
                event.data.originalArgs[callbackIndex] = callback;
            }
        });
        Tracing_1.default.onAlways(MongoDBCoreProxy_1.MongoDBCoreProxy.EVENT_INVOKE_PRE_MONGODB_CORE_CURSOR_NEXT, function (event) {
            var originalArgs = event.data.originalArgs;
            var callback = originalArgs[0];
            if (self.contextManager.isWithinContext() && typeof callback === 'function') {
                // we need to propogate context for any callbacks so the glimpse context ID doesn't get lost
                callback = self.contextManager.wrapInCurrentContext(callback);
                event.data.originalArgs[0] = callback;
            }
        });
    };
    return MongoDBCoreInspector;
}());
exports.MongoDBCoreInspector = MongoDBCoreInspector;

//# sourceMappingURL=../../maps/inspectors/MongoDBCoreInspector.js.map
