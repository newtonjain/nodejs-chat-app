'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ProxyBase_1 = require('./ProxyBase');
var util = require('util');
;
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["Debug"] = 0] = "Debug";
    LogLevel[LogLevel["Verbose"] = 1] = "Verbose";
    LogLevel[LogLevel["Information"] = 2] = "Information";
    LogLevel[LogLevel["Warning"] = 3] = "Warning";
    LogLevel[LogLevel["Error"] = 4] = "Error";
    LogLevel[LogLevel["Critical"] = 5] = "Critical";
})(LogLevel || (LogLevel = {}));
;
/**
 * Represents a region in a string that was replaced by a format statement.
 */
var ReplacementRegion = (function () {
    function ReplacementRegion() {
    }
    return ReplacementRegion;
}());
exports.ReplacementRegion = ReplacementRegion;
/**
 * Information resulting from a format statement
 */
var FormatInfo = (function () {
    function FormatInfo() {
    }
    return FormatInfo;
}());
exports.FormatInfo = FormatInfo;
/**
 * The Proxy class for Console logging
 */
var ConsoleProxy = (function (_super) {
    __extends(ConsoleProxy, _super);
    function ConsoleProxy() {
        _super.apply(this, arguments);
        this._realConsoleMethods = {};
        this._realConsolePrototypeMethods = {};
    }
    /**
     * Init the proxy.
     */
    ConsoleProxy.prototype.init = function (agent, consoleModule) {
        this.agent = agent;
        this.contextManager = agent.providers.contextManager;
        this.addProxy('assert', 'assert', this.assert, consoleModule);
        this.addProxy('debug', 'debug', this.debug, consoleModule); // debug() is not supported on Node, but leave here for client platforms where it may be supported.fs
        this.addProxy('error', 'warn', this.error, consoleModule); // route "error" calls through to warn
        this.addProxy('info', 'log', this.info, consoleModule); // route "info" calls through to log
        this.addProxy('log', 'log', this.log, consoleModule);
        this.addProxy('warn', 'warn', this.warn, consoleModule);
        return consoleModule;
    };
    ;
    Object.defineProperty(ConsoleProxy.prototype, "forceLoadModule", {
        get: function () {
            // we need to load the Console module asap, as users can call the console.* methods without calling require('console').  
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConsoleProxy.prototype, "moduleName", {
        get: function () { return 'console'; },
        enumerable: true,
        configurable: true
    });
    ;
    /**
     * helper method that will send the appropriate glimpse message and invoke the underlying console method
     */
    ConsoleProxy.prototype.proxyHelper = function (originalThis, originalArgs, realMethod, logLevel) {
        var formatInfo = ConsoleProxy.getFormatInfo(originalArgs, 0);
        this.sendLogWriteMessage(formatInfo.message, logLevel, undefined, formatInfo.replacementRegions);
        return realMethod.apply(originalThis, originalArgs);
    };
    /**
     * logic to send messages for Console.assert()
     */
    ConsoleProxy.prototype.assert = function (originalThis, originalArgs, realMethod) {
        if (!originalArgs || !originalArgs[0]) {
            var formatInfo = ConsoleProxy.getFormatInfo(originalArgs, 1);
            this.sendLogWriteMessage(formatInfo.message, LogLevel.Error, undefined, formatInfo.replacementRegions);
        }
        return realMethod.apply(originalThis, originalArgs);
    };
    ;
    /**
     * This is a no-op for now as Node doesn't support debug, but browsers do, so we'll leave this here for when this
     * proxy is hooked up on browser clients.
     */
    ConsoleProxy.prototype.debug = function (originalThis, originalArgs, realMethod) {
        return this.proxyHelper(originalThis, originalArgs, realMethod, LogLevel.Error);
    };
    ;
    /**
     * Logic to send glimpse messages for Console.error()
     */
    ConsoleProxy.prototype.error = function (originalThis, originalArgs, realMethod) {
        return this.proxyHelper(originalThis, originalArgs, realMethod, LogLevel.Error);
    };
    ;
    /**
     * Logic to send glimpse messages for Console.info()
     */
    ConsoleProxy.prototype.info = function (originalThis, originalArgs, realMethod) {
        return this.proxyHelper(originalThis, originalArgs, realMethod, LogLevel.Information);
    };
    /**
     * Logic to send glimpse messages for Console.log()
     */
    ConsoleProxy.prototype.log = function (originalThis, originalArgs, realMethod) {
        return this.proxyHelper(originalThis, originalArgs, realMethod, LogLevel.Verbose);
    };
    /**
     * Logic to send glimpse messages for Console.warn()
     */
    ConsoleProxy.prototype.warn = function (originalThis, originalArgs, realMethod) {
        return this.proxyHelper(originalThis, originalArgs, realMethod, LogLevel.Warning);
    };
    /**
     * Retrieve the formatInfo from the arguments passed to a console log statement
     */
    ConsoleProxy.getFormatInfo = function (originalArgs, messageIndex) {
        var formatInfo = new FormatInfo();
        var formatArgs = Array.prototype.slice.call(originalArgs, messageIndex);
        formatInfo.message = util.format.apply(util, formatArgs);
        formatInfo.replacementRegions = ConsoleProxy.getReplacementRegions(formatArgs);
        return formatInfo;
    };
    /**
     * Given a format string and a set of params, return the array of regions in the formtted string that
     * were replaced by the format command.
     *
     * Returns an array of ReplacementRegion objects, where start is inclusive and end is exclusive.
     */
    ConsoleProxy.getReplacementRegions = function (formatArgs) {
        var format = formatArgs[0];
        var regions = [];
        if (typeof format === 'string') {
            var params = formatArgs.slice(1);
            if (params && params.length > 0) {
                var currentParam = 0;
                var nextStart = 0;
                var i = 0;
                while (i < format.length && currentParam < params.length) {
                    if (format[i] === '%' && i < format.length - 1) {
                        var nextChar = format[i + 1];
                        if (nextChar === '%') {
                            // escaped percent, advance i by 2 and nextStart by 1
                            i += 2;
                            nextStart += 1;
                        }
                        else if (nextChar === 's' || nextChar === 'd' || nextChar === 'j') {
                            var region = new ReplacementRegion();
                            var currentFormat = '%' + nextChar;
                            var currentFormattedLength = util.format(currentFormat, params[currentParam]).length;
                            region.start = nextStart;
                            nextStart += currentFormattedLength;
                            region.end = nextStart;
                            regions.push(region);
                            currentParam++;
                            i += 2;
                        }
                        else {
                            // unescaped %, just advance
                            i++;
                            nextStart++;
                        }
                    }
                    else {
                        i++;
                        nextStart++;
                    }
                }
            }
        }
        return regions;
    };
    /**
     * Send the 'log-write' glimpse message
     */
    ConsoleProxy.prototype.sendLogWriteMessage = function (message, level, category, replacedRegions) {
        var context = this.contextManager.currentContext();
        if (context) {
            var startTime = this.agent.providers.dateTime.now;
            // don't send an empty array
            replacedRegions = (replacedRegions && replacedRegions.length > 0) ? replacedRegions : undefined;
            this.agent.broker.sendMessage({
                message: message,
                level: LogLevel[level],
                source: 'Server',
                category: category,
                startTime: startTime.format(),
                replacedRegions: replacedRegions
            }, ['log-write']);
        }
    };
    ;
    /**
     *  helper method to hookup up a proxy method on the Console object.  This helper
     *  accounts for the fact that there could potentially be two different sets of
     *  log methods, the 'console.*' methods, and then the Console.prototype.* methods.
     */
    ConsoleProxy.prototype.addProxy = function (methodToProxy, methodToCall, proxyFunction, consoleModule) {
        var self = this;
        if (this._realConsoleMethods[methodToProxy] || this._realConsolePrototypeMethods[methodToProxy]) {
            throw new Error(util.format('Attempted to add proxy twice for method %s', methodToProxy));
        }
        if (consoleModule[methodToProxy]) {
            this._realConsoleMethods[methodToProxy] = consoleModule[methodToProxy];
            function p1() {
                proxyFunction.call(self, this, arguments, self._realConsoleMethods[methodToCall]);
            }
            ;
            consoleModule[methodToProxy] = p1;
        }
        if (consoleModule.Console.prototype[methodToProxy]) {
            this._realConsolePrototypeMethods[methodToProxy] = consoleModule.Console.prototype[methodToProxy];
            function p2() {
                proxyFunction.call(self, this, arguments, self._realConsolePrototypeMethods[methodToCall]);
            }
            ;
            consoleModule.Console.prototype[methodToProxy] = p2;
        }
    };
    ;
    return ConsoleProxy;
}(ProxyBase_1.ProxyBase));
exports.ConsoleProxy = ConsoleProxy;

//# sourceMappingURL=../../maps/inspectors/ConsoleProxy.js.map
