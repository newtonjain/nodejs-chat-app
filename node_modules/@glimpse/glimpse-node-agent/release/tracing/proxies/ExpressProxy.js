'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ExpressProxyActionRouteView_1 = require('./ExpressProxyActionRouteView');
var ExpressProxyMiddleware_1 = require('./ExpressProxyMiddleware');
var ProxyBase_1 = require('./ProxyBase');
var ExpressProxy = (function (_super) {
    __extends(ExpressProxy, _super);
    function ExpressProxy() {
        _super.apply(this, arguments);
    }
    ExpressProxy.prototype.getModuleNames = function () { return ['express']; };
    ;
    ExpressProxy.prototype.init = function (express, resolvedModulePath) {
        ExpressProxyActionRouteView_1.ExpressProxyActionRouteView.init(express);
        ExpressProxyMiddleware_1.ExpressProxyMiddleware.init(express);
    };
    Object.defineProperty(ExpressProxy.prototype, "forceLoadModule", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    /*
      Grammar for event name:
        <event> :== <method-invocation-event> | <notify-event>

        <method-invocation-event> :== "invoke"<seperator><method-phase><seperator><JSNamePath>
        <notify-event> :== "notify"<seperator><module-name><seperator><event-name>

        <method-phase> :== "pre" | "post"
        <module-name> :== <JSNamepath>
        <event-name> :== **todo**
        <seperator> :== "|"
        <JSNamePath> :== See http://usejsdoc.org/about-namepaths.html for details
    */
    // EVENT_INVOKE_PRE_EXPRESS_ROUTE_METHOD gets raised for multiple methods that are defined in a list, so it doesn't precisely follow naming convention
    ExpressProxy.EVENT_INVOKE_PRE_EXPRESS_ROUTE_METHOD = 'invoke|pre|module:/express.Route#**multi-method**';
    ExpressProxy.EVENT_INVOKE_PRE_EXPRESS_ROUTER_USE = 'invoke|pre|module:/express.Router#use';
    ExpressProxy.EVENT_INVOKE_PRE_EXPRESS_ROUTER = 'invoke|post|module:/express.Router';
    ExpressProxy.EVENT_INVOKE_PRE_EXPRESS_STATIC = 'invoke|post|module:/express.static';
    ExpressProxy.EVENT_INVOKE_PRE_EXPRESS_ROUTE_DISPATCH = 'invoke|pre|module:/express.Route#dispatch';
    ExpressProxy.EVENT_INVOKE_PRE_EXPRESS_VIEW_RENDER = 'invoke|pre|module:/express.View#render';
    ExpressProxy.EVENT_INVOKE_PRE_EXPRESS_RESPONSE_RENDER = 'invoke|pre|module:/express.response.render';
    ExpressProxy.EVENT_INVOKE_PRE_EXPRESS_RESPONSE_SEND = 'invoke|pre|module:/express.response.send';
    ExpressProxy.EVENT_INVOKE_PRE_EXPRESS_RESPONSE_END = 'invoke|pre|module:/express.response.end';
    ExpressProxy.EVENT_NOTIFY_EXPRESS_RENDER_COMPLETE = 'notify|module:/express|render-complete';
    return ExpressProxy;
}(ProxyBase_1.ProxyBase));
exports.ExpressProxy = ExpressProxy;

//# sourceMappingURL=../../../maps/tracing/proxies/ExpressProxy.js.map
