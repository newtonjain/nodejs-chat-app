'use strict';
// load context manager first so we can avoid modules getting loaded before we have a chance to overwrite calls for async context tracking
var ContextManagerProvider_1 = require('./messaging/ContextManagerProvider');
var cm = ContextManagerProvider_1.ContextManagerProvider.getContextManager();
var AgentBroker_1 = require('./messaging/AgentBroker');
var MessagePublisher_1 = require('./messaging/MessagePublisher');
var ResourceProvider_1 = require('./configuration/ResourceProvider');
var ModuleManager_1 = require('./inspectors/ModuleManager');
var ErrorReporting_1 = require('./errors/ErrorReporting');
var Errors = require('./errors/Errors');
// "old" inspector-proxies
var HttpProxy_1 = require('./inspectors/HttpProxy');
var KnexProxy_1 = require('./inspectors/KnexProxy');
var ConsoleProxy_1 = require('./inspectors/ConsoleProxy');
var MorganProxy_1 = require('./inspectors/MorganProxy');
var BodyParserProxy_1 = require('./inspectors/BodyParserProxy');
var CookieParserProxy_1 = require('./inspectors/CookieParserProxy');
var EnvironmentInspector_1 = require('./inspectors/EnvironmentInspector');
var WebInspector_1 = require('./inspectors/WebInspector');
var ClientRequestInspector_1 = require('./inspectors/ClientRequestInspector');
// new "proxies"
var ExpressProxy_1 = require('./tracing/proxies/ExpressProxy');
var MongoDBProxy_1 = require('./tracing/proxies/MongoDBProxy');
var MongoDBCoreProxy_1 = require('./tracing/proxies/MongoDBCoreProxy');
var HttpClientProxy_1 = require('./tracing/proxies/HttpClientProxy');
var RequestIdInjector_1 = require('./tracing/proxies/RequestIdInjector');
// "new" inspectors
var ExpressInspectorActionRouteView_1 = require('./inspectors/ExpressInspectorActionRouteView');
var ExpressInspectorMiddleware_1 = require('./inspectors/ExpressInspectorMiddleware');
var MongoDBInspector_1 = require('./inspectors/MongoDBInspector');
var MongoDBCoreInspector_1 = require('./inspectors/MongoDBCoreInspector');
var DateTime_1 = require('./configuration/DateTime');
var ScriptManager_1 = require('./messaging/ScriptManager');
var ConfigSettings_1 = require('./configuration/ConfigSettings');
var RequireAnalyzer_1 = require('./configuration/RequireAnalyzer');
var path = require('path');
var Agent = (function () {
    function Agent() {
        this._contextManager = cm;
        this._errorReportingService = ErrorReporting_1.ErrorReporting.getService();
        this._resourceProvider = new ResourceProvider_1.ResourceProvider();
        this._messagePublisher = new MessagePublisher_1.MessagePublisher(this._resourceProvider);
        var commandLineArgs = ConfigSettings_1.ConfigSettings.filterCommandLineArgs('--GLIMPSE_');
        var localSettingsFile = ConfigSettings_1.ConfigSettings.findFile(__dirname, 'glimpse.config.json');
        var defaultSettings = path.join(__dirname, 'glimpse.agent.default.config.json');
        var configSettings = new ConfigSettings_1.ConfigSettings(commandLineArgs, 'GLIMPSE_', localSettingsFile, defaultSettings);
        this._providers = {
            contextManager: this._contextManager,
            dateTime: new DateTime_1.DateTime(),
            errorReportingService: this._errorReportingService,
            messagePublisher: this._messagePublisher,
            resourceProvider: this._resourceProvider,
            scriptManager: new ScriptManager_1.ScriptManager(this._contextManager, this._resourceProvider),
            configSettings: configSettings
        };
        this._broker = new AgentBroker_1.AgentBroker(this);
    }
    Object.defineProperty(Agent.prototype, "broker", {
        get: function () {
            return this._broker;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Agent.prototype, "providers", {
        get: function () {
            return this._providers;
        },
        enumerable: true,
        configurable: true
    });
    Agent.prototype.init = function (options) {
        this.validateReferencedPackages();
        new ExpressInspectorActionRouteView_1.ExpressInspectorActionRouteView().init(this._broker, this._contextManager, this._providers.dateTime, this._providers.errorReportingService, this._providers.scriptManager);
        new ExpressInspectorMiddleware_1.ExpressInspectorMiddleware().init(this._broker, this._contextManager, this._providers.dateTime);
        new MongoDBInspector_1.MongoDBInspector().init(this);
        new MongoDBCoreInspector_1.MongoDBCoreInspector().init(this);
        new ClientRequestInspector_1.ClientRequestInspector().init(this);
        // setup interceptor
        var moduleManager = new ModuleManager_1.ModuleManager();
        moduleManager.init(this, require('module'));
        // always load console proxy first since we need to trap console methods before console module gets loaded
        moduleManager.addProxy(new ConsoleProxy_1.ConsoleProxy());
        moduleManager.addTracingProxy(new RequestIdInjector_1.RequestIdInjector());
        var httpProxy = new HttpProxy_1.HttpProxy();
        httpProxy.addServerInspector(new WebInspector_1.WebInspector());
        httpProxy.addServerInspector(new EnvironmentInspector_1.EnvironmentInspector());
        moduleManager.addProxy(httpProxy, 'http');
        moduleManager.addProxy(httpProxy, 'https');
        moduleManager.addTracingProxy(new ExpressProxy_1.ExpressProxy());
        moduleManager.addTracingProxy(new HttpClientProxy_1.HttpClientProxy());
        moduleManager.addProxy(new KnexProxy_1.KnexProxy());
        moduleManager.addTracingProxy(new MongoDBCoreProxy_1.MongoDBCoreProxy());
        moduleManager.addTracingProxy(new MongoDBProxy_1.MongoDBProxy());
        moduleManager.addProxy(new MorganProxy_1.MorganProxy());
        moduleManager.addProxy(new BodyParserProxy_1.BodyParserProxy());
        moduleManager.addProxy(new CookieParserProxy_1.CookieParserProxy());
        this._resourceProvider.init(this._contextManager, options);
        this._providers.scriptManager.init();
        this._messagePublisher.init(options);
    };
    Agent.prototype.validateReferencedPackages = function () {
        var _this = this;
        if (this.providers.configSettings.getBoolean('agent.validate-packages.enabled', true)) {
            var excludedPackages = this.providers.configSettings.get('agent.validate-packages.excludedPackages', []);
            var packageNames = RequireAnalyzer_1.RequireAnalyzer.getReferencedPackageNames(require.cache, excludedPackages);
            if (packageNames.length > 0) {
                packageNames.forEach(function (packageName) {
                    _this.providers.errorReportingService.reportError(Errors.packageRequiredBeforeInit(packageName));
                });
            }
        }
    };
    return Agent;
}());
exports.Agent = Agent;

//# sourceMappingURL=../maps/Agent.js.map
