'use strict';

import * as http from 'http';
import { IContext, IRunInContextCallback, IContextManager } from './IContextManager';
import { GuidHelper } from './../util/GuidHelper';
import { ErrorReporting } from '../errors/ErrorReporting';
import * as Errors from '../errors/Errors';

export class ContextManagerBase implements IContextManager {

    public init(): void {
        //no-op
    }

    public createContext(req: http.IncomingMessage) {
        const context = {
            id: GuidHelper.newGuid(false),
            type: 'Request',
            startTime: new Date(),
            req: req
        };

        return context;
    };

    public isWithinContext(): boolean {
        return (this.currentContext() ? true : false);
    }

    public currentContext(): IContext {
        throw new Error('please override');
    }

    public runInNewContext(req: http.IncomingMessage, callback: IRunInContextCallback) {
        throw new Error('please override');
    }

    public wrapInCurrentContext(callback: IRunInContextCallback) {
        return callback;
    }

    public checkContextID(location: string, expectedContextID?: string) {
        const currentContext = this.currentContext();
        if (expectedContextID) {
            const currentContextID = currentContext ? currentContext.id : undefined;
            if (currentContextID !== expectedContextID) {
                ErrorReporting.getService().reportError(Errors.unexpectedContext(), location, expectedContextID, currentContextID);
            }
        }
        else if (!currentContext) {
            ErrorReporting.getService().reportError(Errors.noContext(), location);
        }
    }

}
