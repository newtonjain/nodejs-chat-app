'use strict';

import { IResourceProvider } from './IResourceProvider';

import * as request from 'request';

interface IResourceProviderCallback {
    (resources: { [key: string]: string }): void;
}

export class ResourceProviderHttp implements IResourceProvider {
    private static EXPORT_CONFIG_RESOURCE_NAME = 'export-config';

    private resources: { [key: string]: string };
    private waiters: IResourceProviderCallback[] = [];

    public constructor(private metadataUri: string) {
    }

    public getResourceDefinitions(callback: (resources: { [key: string]: string }) => void): void {
        if (!this.resources) {
            this.waiters.push(callback);

            if (this.waiters.length === 1) {
                const that = this;

                const notifyWaiters = () => {
                    while (that.waiters.length > 0){
                        const waiter = that.waiters.pop();

                        waiter(that.resources);
                    };
                };

                request(this.metadataUri, (metadataErr, metadataRes, metadataBody) => {
                    if (metadataErr) {
                        throw metadataErr;
                    }

                    const metadata = JSON.parse(metadataBody);

                    const exportConfigUri = metadata.resources[ResourceProviderHttp.EXPORT_CONFIG_RESOURCE_NAME];

                    if (exportConfigUri) {
                        request(exportConfigUri, (exportErr, exportRes, exportBody) => {
                            if (exportErr) {
                                throw exportErr;
                            }

                            that.resources = JSON.parse(exportBody);

                            notifyWaiters();
                        });
                    }
                    else {
                        that.resources = {};

                        notifyWaiters();
                    }
                });
            }
        }
        else {
            callback(this.resources);
        }
    }
}
